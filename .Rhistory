library(ggplot2)
# 设置自由度和颜色
df_values <- list(c(1, 1, "red"), c(2, 1, "yellow"), c(5, 1, "green"), c(10, 2, "purple"), c(100, 1, "black"))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建一个数据框
df <- data.frame(x = rep(x_values, length(df_values)),
df1 = rep(sapply(df_values, "[[", 1), each = length(x_values)),
df2 = rep(sapply(df_values, "[[", 2), each = length(x_values)),
color = rep(sapply(df_values, "[[", 3), each = length(x_values)))
# 添加F分布曲线
df$density <- mapply(function(x, df1, df2) d(df1, df2, x), df$x, df$df1, df$df2)
# 绘制F分布曲线
p <- ggplot(data = df, aes(x = x, y = density, color = color)) +
geom_line() +
labs(title = "F-distribution Density Curves", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度和颜色
df_values <- list(c(1, 1, "red"), c(2, 1, "yellow"), c(5, 1, "green"), c(10, 2, "purple"), c(100, 1, "black"))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建一个数据框
df <- data.frame(x = rep(x_values, length(df_values)),
df1 = rep(sapply(df_values, "[[", 1), each = length(x_values)),
df2 = rep(sapply(df_values, "[[", 2), each = length(x_values)),
color = rep(sapply(df_values, "[[", 3), each = length(x_values)))
# 绘制F分布曲线
p <- ggplot(data = df, aes(x = x, color = color)) +
stat_function(fun = function(x, df1, df2) d(df1, df2, x),
aes(y = ..density..),
data = df) +
labs(title = "F-distribution Density Curves", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度和颜色
df_values <- list(c(1, 1, "red"), c(2, 1, "yellow"), c(5, 1, "green"), c(10, 2, "purple"), c(100, 1, "black"))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建一个数据框
df <- data.frame(x = rep(x_values, length(df_values)),
df1 = rep(sapply(df_values, "[[", 1), each = length(x_values)),
df2 = rep(sapply(df_values, "[[", 2), each = length(x_values)),
color = rep(sapply(df_values, "[[", 3), each = length(x_values)))
# 绘制F分布曲线
p <- ggplot(data = df, aes(x = x, color = color)) +
stat_function(fun = function(x, df1, df2) df(x, df1, df2),
aes(y = after_stat(density)),
data = df) +
labs(title = "F-distribution Density Curves", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度和颜色
df_values <- list(c(1, 1, "red"), c(2, 1, "yellow"), c(5, 1, "green"), c(10, 2, "purple"), c(100, 1, "black"))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建一个数据框
df <- data.frame(x = rep(x_values, length(df_values)),
df1 = rep(sapply(df_values, "[[", 1), each = length(x_values)),
df2 = rep(sapply(df_values, "[[", 2), each = length(x_values)),
color = rep(sapply(df_values, "[[", 3), each = length(x_values)))
# 绘制F分布曲线
p <- ggplot(data = df, aes(x = x, color = color)) +
stat_function(fun = function(x, df1, df2) df(x, df1, df2),
aes(y = after_stat(density)),
data = df) +
labs(title = "F-distribution Density Curves", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度和颜色
df_values <- list(c(1, 1, "red"), c(2, 1, "yellow"), c(5, 1, "green"), c(10, 2, "purple"), c(100, 1, "black"))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建一个数据框
df <- data.frame(x = rep(x_values, length(df_values)),
df1 = rep(sapply(df_values, "[[", 1), each = length(x_values)),
df2 = rep(sapply(df_values, "[[", 2), each = length(x_values)),
color = rep(sapply(df_values, "[[", 3), each = length(x_values)))
# 计算F分布概率密度函数
df$density <- mapply(function(x, df1, df2) diff(pf(x, df1, df2)), df$x, df$df1, df$df2)
# 绘制F分布曲线
p <- ggplot(data = df, aes(x = x, color = color)) +
geom_line(aes(y = density)) +
labs(title = "F-distribution Density Curves", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度和颜色
df_values <- list(c(1, 1, "red"), c(2, 1, "yellow"), c(5, 1, "green"), c(10, 2, "purple"), c(100, 1, "black"))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建一个数据框
df <- data.frame(x = rep(x_values, length(df_values)),
df1 = rep(sapply(df_values, "[[", 1), each = length(x_values)),
df2 = rep(sapply(df_values, "[[", 2), each = length(x_values)),
color = rep(sapply(df_values, "[[", 3), each = length(x_values)))
# 计算F分布概率密度函数
df$density <- mapply(function(x, df1, df2) diff(pf(x, df1, df2)), df$x, df$df1, df$df2)
# 绘制F分布曲线
p <- ggplot(data = df, aes(x = x, color = color)) +
geom_line(aes(y = density)) +
labs(title = "F-distribution Density Curves", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df <- 3  # 你可以根据需要更改自由度
# 生成横坐标点
x_values <- seq(0, 20, length.out = 1000)
# 计算卡方分布的概率密度
density_values <- dchisq(x_values, df)
# 创建数据框
df_data <- data.frame(x = x_values, density = density_values)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density)) +
geom_line() +
labs(title = "Chi-square Distribution Curve", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 30, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 生成纵坐标点
y_values <- seq(0, 1, length.out = 100)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom") +
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "v:Degrees of Freedom") +
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置分子自由度
df1 <- 1
# 设置分母自由度范围
df2_values <- c(1, 5, 10, 20, 50)
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df2 = df2_values)
# 计算F分布的概率密度
df_data$density <- df(df_data$x, df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df2))) +
geom_line() +
labs(title = "F-distribution Curves with df1=1", x = "x", y = "Density", color = "df2") +
scale_color_discrete(name = "df2")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df2))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df2") +
scale_color_discrete(name = "df2")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "purple", "black"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))+
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))+
ylim(0, 2.5)  # 设置y轴范围
# 显示图表
print(p)
install.packages("blogdown")
install.packages("cowsay")
say("I am a malou".by="monkey")
library(cowsya)
say("I am a malou".by="monkey")
library(cowsay)
say("I am a malou".by="monkey")
library(cowsay)
say("I am a malou",by="monkey")
install.packages("ggplot2")
install.packages("C:/Users/asus/AppData/Local/R/win-library/4.3/ggplot2_3.5.1.zip", repos = NULL, type = "source")
install.packages("C:/Users/asus/AppData/Local/R/win-library/4.3/ggplot2_3.5.1.zip", repos = NULL, type = "win.binary")
install.packages("tufte")
setwd("C:/Users/asus/Desktop/R/zhoulvbang/zhoulvbang.github.io")
setwd("C:/Users/asus/Desktop/R/zhoulvbang/zhoulvbang.github.io")
bookdown::render_book("index.Rmd")
library(ggplot2)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
按照ICD-10（International Classification of Diseases）进行分类与赋值。
icd_data <- tibble::tribble(
~"章", ~"块", ~"标题",
"I", "A00-B99", "某些传染病和寄生虫病",
"II", "C00-D48", "肿瘤",
"III", "D50-D89", "血液及造血器官疾病和某些涉及免疫系统的疾患",
"IV", "E00-E90", "内分泌，营养和代谢疾病",
"V", "F00-F99", "精神和行为疾患",
"VI", "G00-G99", "神经系统疾病",
"VII", "H00-H59", "眼和附器疾病",
"VIII", "H60-H95", "耳和乳突疾病",
"IX", "I00-I99", "循环系统疾病",
"X", "J00-J99", "呼吸系统疾病",
"XI", "K00-K93", "消化系统疾病",
"XII", "L00-L99", "皮肤和皮下组织疾病",
"XIII", "M00-M99", "肌肉骨骼系统和结缔组织疾病",
"XIV", "N00-N99", "泌尿生殖系统疾病",
"XV", "O00-O99", "妊娠、分娩和产褥期",
"XVI", "P00-P96", "起源于围产期的某些情况",
"XVII", "Q00-Q99", "先天畸形、变形和染色体异常",
"XVIII", "R00-R99", "症状、体征和临床与实验室异常所见，不可归类在他处者",
"XIX", "S00-T98", "损伤、中毒和外因的某些其他后果",
"XX", "V01-Y98", "疾病和死亡的外因",
"XXI", "Z00-Z99", "影响健康状态和与保健机构接触的因素",
"XXII", "U00-U99", "特殊目的代码"
)
knitr::kable(icd_data, caption = "ICD 分类章节")
