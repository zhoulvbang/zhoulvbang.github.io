geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 生成纵坐标点
y_values <- seq(0, 1, length.out = 100)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom") +
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "v:Degrees of Freedom") +
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置分子自由度
df1 <- 1
# 设置分母自由度范围
df2_values <- c(1, 5, 10, 20, 50)
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df2 = df2_values)
# 计算F分布的概率密度
df_data$density <- df(df_data$x, df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df2))) +
geom_line() +
labs(title = "F-distribution Curves with df1=1", x = "x", y = "Density", color = "df2") +
scale_color_discrete(name = "df2")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df2))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df2") +
scale_color_discrete(name = "df2")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "purple", "black"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))+
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))+
ylim(0, 2.5)  # 设置y轴范围
# 显示图表
print(p)
install.packages("blogdown")
install.packages("cowsay")
say("I am a malou".by="monkey")
library(cowsya)
say("I am a malou".by="monkey")
library(cowsay)
say("I am a malou".by="monkey")
library(cowsay)
say("I am a malou",by="monkey")
install.packages("ggplot2")
install.packages("C:/Users/asus/AppData/Local/R/win-library/4.3/ggplot2_3.5.1.zip", repos = NULL, type = "source")
install.packages("C:/Users/asus/AppData/Local/R/win-library/4.3/ggplot2_3.5.1.zip", repos = NULL, type = "win.binary")
install.packages("tufte")
# 安装和加载所需的包
install.packages("plotly")
library(plotly)
library(MASS)
# 设置随机种子
set.seed(42)
# 生成样本数据
n <- 500
mu <- c(170, 65, 30)  # 增加一个第三维的均值
sigma <- matrix(c(100, 20, 5,
20, 25, 3,
5, 3, 4), nrow=3)  # 三维的协方差矩阵
samples <- MASS::mvrnorm(n, mu, sigma)
# 转换为数据框
data <- data.frame(Height = samples[,1], Weight = samples[,2], Age = samples[,3])
# 绘制三维散点图
plot_ly(data, x = ~Height, y = ~Weight, z = ~Age, type = "scatter3d", mode = "markers") %>%
layout(title = "三维散点图：身高、体重与年龄",
scene = list(xaxis = list(title = "身高 (cm)"),
yaxis = list(title = "体重 (kg)"),
zaxis = list(title = "年龄 (岁)")))
library(plotly)
library(MASS)
# 创建网格数据
x <- seq(150, 190, length.out = 100)
y <- seq(50, 80, length.out = 100)
grid <- expand.grid(X = x, Y = y)
# 设置均值和协方差矩阵
mu <- c(170, 65)
sigma <- matrix(c(100, 20, 20, 25), nrow = 2)
# 计算概率密度
z <- dmvnorm(as.matrix(grid), mean = mu, sigma = sigma)
# 安装和加载所需的包
install.packages("plotly")
install.packages("mvtnorm")
library(plotly)
library(mvtnorm)
# 创建网格数据
x <- seq(150, 190, length.out = 100)
y <- seq(50, 80, length.out = 100)
grid <- expand.grid(X = x, Y = y)
# 设置均值和协方差矩阵
mu <- c(170, 65)
sigma <- matrix(c(100, 20, 20, 25), nrow = 2)
# 计算概率密度
z <- dmvnorm(as.matrix(grid), mean = mu, sigma = sigma)
# 将概率密度矩阵转换为适合绘图的形状
z_matrix <- matrix(z, nrow = 100, ncol = 100)
# 绘制三维表面图
plot_ly(x = x, y = y, z = z_matrix, type = "surface") %>%
layout(title = "双元正态分布的三维概率密度图",
scene = list(xaxis = list(title = "身高 (cm)"),
yaxis = list(title = "体重 (kg)"),
zaxis = list(title = "概率密度")))
# 创建网格数据
x <- seq(150, 190, length.out = 100)
y <- seq(50, 80, length.out = 100)
grid <- expand.grid(X = x, Y = y)
# 设置均值和协方差矩阵
mu <- c(170, 65)
sigma <- matrix(c(100, 20, 20, 25), nrow = 2)
# 计算概率密度
z <- dmvnorm(as.matrix(grid), mean = mu, sigma = sigma)
library(plotly)
library(mvtnorm)
# 创建网格数据
x <- seq(150, 190, length.out = 100)
y <- seq(50, 80, length.out = 100)
grid <- expand.grid(X = x, Y = y)
# 设置均值和协方差矩阵
mu <- c(170, 65)
sigma <- matrix(c(100, 20, 20, 25), nrow = 2)
# 计算概率密度
z <- dmvnorm(as.matrix(grid), mean = mu, sigma = sigma)
# 将概率密度矩阵转换为适合绘图的形状
z_matrix <- matrix(z, nrow = 100, ncol = 100)
# 绘制三维表面图
plot_ly(x = x, y = y, z = z_matrix, type = "surface") %>%
layout(title = list(text = "双元正态分布的三维概率密度图", y=0.95),
scene = list(xaxis = list(title = "身高 (cm)"),
yaxis = list(title = "体重 (kg)"),
zaxis = list(title = "概率密度")))
library(plotly)
library(mvtnorm)
# 创建网格数据
x <- seq(150, 190, length.out = 100)
y <- seq(50, 80, length.out = 100)
grid <- expand.grid(X = x, Y = y)
# 设置均值和协方差矩阵
mu <- c(170, 65)
sigma <- matrix(c(100, 20, 20, 25), nrow = 2)
# 计算概率密度
z <- dmvnorm(as.matrix(grid), mean = mu, sigma = sigma)
# 将概率密度矩阵转换为适合绘图的形状
z_matrix <- matrix(z, nrow = 100, ncol = 100)
# 创建线性拟合模型，假设体重是身高的线性函数
linear_fit <- lm(y ~ x)
line_y <- linear_fit$coefficients[1] + linear_fit$coefficients[2] * x
# 绘制三维表面图并添加线性拟合直线
plot_ly(x = x, y = y, z = z_matrix, type = "surface") %>%
add_trace(x = x, y = line_y, z = rep(0.01, length(x)), type = "scatter3d", mode = "lines",
line = list(color = "red", width = 4)) %>%
layout(title = list(text = "双元正态分布的三维概率密度图及线性相关直线", y = 0.95),
scene = list(xaxis = list(title = "身高 (cm)"),
yaxis = list(title = "体重 (kg)"),
zaxis = list(title = "概率密度")))
# Parameters
parameters <- list(
list(n = 5, pi = 0.3),
list(n = 10, pi = 0.3),
list(n = 20, pi = 0.5),
list(n = 30, pi = 0.3)
)
# Create a list to store the plots
plots <- list()
# Loop through each set of parameters and create the plot
for (param in parameters) {
n <- param$n
pi <- param$pi
x <- 0:n
pmf <- dbinom(x, size = n, prob = pi)
title <- paste("Binomial Distribution (n =", n, ", π =", pi, ")")
data <- data.frame(x, pmf)
plot <- ggplot(data, aes(x = x, y = pmf)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
labs(title = title, x = "Number of Successes", y = "Probability") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the plot title
plots[[length(plots) + 1]] <- plot
}
# Arrange the plots in a 2x2 grid
grid.arrange(grobs = plots, ncol = 2)
library(cowplot)
# Parameters
parameters <- list(
list(n = 5, pi = 0.3),
list(n = 10, pi = 0.3),
list(n = 20, pi = 0.5),
list(n = 30, pi = 0.3)
)
# Create a list to store the plots
plots <- list()
# Loop through each set of parameters and create the plot
for (param in parameters) {
n <- param$n
pi <- param$pi
x <- 0:n
pmf <- dbinom(x, size = n, prob = pi)
title <- paste("Binomial Distribution (n =", n, ", π =", pi, ")")
data <- data.frame(x, pmf)
plot <- ggplot(data, aes(x = x, y = pmf)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
labs(title = title, x = "Number of Successes", y = "Probability") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the plot title
plots[[length(plots) + 1]] <- plot
}
# Arrange the plots in a 2x2 grid
grid.arrange(grobs = plots, ncol = 2)
library(gridExtra)
# Parameters
parameters <- list(
list(n = 5, pi = 0.3),
list(n = 10, pi = 0.3),
list(n = 20, pi = 0.5),
list(n = 30, pi = 0.3)
)
# Create a list to store the plots
plots <- list()
# Loop through each set of parameters and create the plot
for (param in parameters) {
n <- param$n
pi <- param$pi
x <- 0:n
pmf <- dbinom(x, size = n, prob = pi)
title <- paste("Binomial Distribution (n =", n, ", π =", pi, ")")
data <- data.frame(x, pmf)
plot <- ggplot(data, aes(x = x, y = pmf)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +
labs(title = title, x = "Number of Successes", y = "Probability") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))  # Center the plot title
plots[[length(plots) + 1]] <- plot
}
# Arrange the plots in a 2x2 grid
grid.arrange(grobs = plots, ncol = 2)
setwd("C:/Users/asus/Desktop/R/zhoulvbang/zhoulvbang.github.io")
# 创建网格数据
x <- seq(150, 190, length.out = 100)
y <- seq(50, 80, length.out = 100)
grid <- expand.grid(X = x, Y = y)
# 设置均值和协方差矩阵
mu <- c(170, 65)
sigma <- matrix(c(100, 20, 20, 25), nrow = 2)
# 计算概率密度
z <- dmvnorm(as.matrix(grid), mean = mu, sigma = sigma)
# 将概率密度矩阵转换为适合绘图的形状
z_matrix <- matrix(z, nrow = 100, ncol = 100)
# 绘制三维表面图
plot_ly(x = x, y = y, z = z_matrix, type = "surface") %>%
layout(title = list(text = "双元正态分布的三维概率密度图", y=0.95),
scene = list(xaxis = list(title = "身高 (cm)"),
yaxis = list(title = "体重 (kg)"),
zaxis = list(title = "概率密度")))
install.packages("dmvnorm")
install.packages("mvtnorm")
bookdown::render_book("index.Rmd")
bookdown:::serve_book()
bookdown::render_book("index.Rmd")
