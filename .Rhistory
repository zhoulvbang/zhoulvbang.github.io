print("Hello World")
a <- 'hello world'
a
'hello world!' ->b
b
.libPaths()
install.packages('nnet')
install.packages("nnet")
install.packages("arules")
head(iris)
date()
data()
datatable(iris)
install.packages("DT")
datatable(iris)
library(DT)
datatable(iris)
<- c(1,2,3,4,5)
x <- c(1,2,3,4)
is.numeric(x)
x3 <- rep(c(3,2),c(2,5))
x3
x <- 1:6
diag(x)
＞ mydata ＜- edit（mydata）
# 键盘输入
# 创建一个指定模式但不含数据的变量
mydata ＜- data.frame（age = numeric（0）, gender = character（0），+　 weight = numeric（0））
# 键盘输入
# 创建一个指定模式但不含数据的变量
mydata ＜- data.frame（age = numeric（0）, gender = character（0），+　 weight = numeric（0））
# 键盘输入变量
mydata ＜- edit（mydata）
mydata <- data.frame(age = numeric(0), gender = character(0)，+weight = numeric(0))
mydata <- data.frame(age = numeric(0), gender = character(0)，
+ weight = numeric(0))
mydata <- data.frame(age = numeric(0), gender = character(0)，
+ weight = numeric(0))
mydata<-data.frame(age=numeric(0),gender=character(0),weight=numeric(0))
mydata <- data.frame(age = numeric(0), gender = character(0)，weight = numeric(0))
# 键盘输入变量
mydata <- edit(mydata)
install.packages("xlsx")
library(xlsx)
file <- "C:\Users\asus\Desktop\急性心肌梗死\原始数据\心肌梗死数据.xlsx"
file <- "C:/Users/asus/Desktop/急性心肌梗死/原始数据/心肌梗死数据.xlsx"
excel<-read.xlsx(file,1)
View(excel)
install.packages("RODBC")
install.packages("RCurl")
library(XML)
strurl<-'http://www.gov.cn/shuju//hgjjyxqk/detail.html?q=2'
tables<-readHTMLTable(strurl,header = FALSE,stringAsFactors=FALSE)
table_sub<-tables[[1]]
library(XML)
strurl <- 'http://sports.163.com/zc/'
tables <- readHTMLTable(strurl,header = FALSE,stringsAsFactors = FALSE)
# 解决中文乱码问题的方法：将数据导出到本地的txt文件，再重新导入即可：
table_sub <- tables[[1]]
write.table(table_sub,"table_sub.txt",row.names=F)
read.table("table_sub.txt",encoding = 'UTF-8',header = T)
library(XML)
strurl <- 'http://sports.163.com/zc/'
tables <- readHTMLTable(strurl,header = FALSE,stringsAsFactors = FALSE)
# 解决中文乱码问题的方法：将数据导出到本地的txt文件，再重新导入即可：
table_sub <- tables[[1]]
write.table(table_sub,"table_sub.txt",row.names=F)
read.table("table_sub.txt",encoding = 'UTF-8',header = T)
install.packages("sampling")
install.packages(sqldf)
install.packages("sqldf")
install.packages(reshape2)
library(reshape2)
x <- pretty(c(-3, 3), 30)
y <- dnorm(x)
plot(x, y, type = "l", xlab = "Normal Deviate", ylab = "Density", yaxs = "i")
hist(cars$speed)
barplot(VADeaths,beside = TRUE)
par(mfrow=c(1,2))
boxplot(iris[1:4],main = '单独的箱线图')
boxplot(Sepal,length ~ Species,data=iris,main = '组间比较的箱线图')
boxplot(Sepal.length ~ Species,data=iris,main = '组间比较的箱线图')
boxplot(Sepal.Length ~ Species,data=iris,main = '组间比较的箱线图')
library(corrgram)
library(corrplot)
install.packages("corrgram")
install.packages("corrplot")
library(corrgram)
corrgram(mtcars,order = TRUE,upper.panel = panel.ellipse,main='Correlogram')
install.packages(sm)
install.packages("sm")
library(sm)
update.packages("sm")
library(sm)
sm.density.compare(mtcars$wt,factor(mtcars$cyl))
install.packages("vioplot")
stars(mtcars,draw.segments = TRUE)
stars(mtcars,draw.segments = TRUE)
install.packages(RColorBrewer)
install.packages("RColorBrewer")
install.packages("RGtk2")
install.packages("rattle")
library(rattle)
rattle()
install.packages("RGtk2")
rattle()
update.packages()
rattle()
install.packages("RGtk2")
detach("package:RGtk2")
remove.packages("RGtk2")
install.packages("RGtk2")
install.packages("rattle", repos="https://rattle.togaware.com", type="source")
install.packages("rattle", repos = "https://rattle.togaware.com", type = "source")
rattle()
install.packages('devtools')
install.packages('Rcurl')
install.packages('RCurl')
install.packages('RJSONIO','whisker')
install.packages('RJSONIO')
install.packages('whisker')
install.packages('yaml')
install.packages('httpuv')
require(devtools)
install_github('ramnathv/rCharts')
install.packages('lattice')
library(rCharts)
names(iris)=gsub("\\." , "",names(iris))
rPlot(SepalLength ~ SepalWidth | Species,data=iris,color='Species',type='point')
install.packages('googleVis')
install.packages('hnitr')
install.packages('kintr')
install.packages("cowplot")
install.packages("MASS")
install.packages("JWileymisc")
library(ggplot2)
ggplot(iris,aes(Sepal.Length))
geom_histogram()
ggplot(iris,aes(Sepal.Length)) geom_histogram()
ggplot(iris,aes(Sepal.Length)) + geom_histogram()
table = data.frame(
姓名 = c("张三", "李四"),
工号 = c("001","002"),
月薪 = c(1000, 2000)
)
# 显示概要
print(summary(table))
.libPaths()
library()
search()
install.packages("xlsx", repos = "https://mirrors.ustc.edu.cn/CRAN/")
# 验证包是否安装
any(grepl("xlsx",installed.packages()))
# 载入包
library("xlsx")
library("xlsx")
install.packages("XML", repos = "https://mirrors.ustc.edu.cn/CRAN/")
install.packages("rjson", repos = "https://mirrors.ustc.edu.cn/CRAN/")
install.packages(nnet)
install.packages(“nnet”)
install.package(nnet)
install.packages(tree)
install.packages(“tree”)
install.packages(forecast)
install.packages("forecast")
install.packages("tseries")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("randomForest")
install.packages(JWileymisc)
library(checkpoint)
install.packages(checkpoint)
install.packages("checkpoint")
install.packages("JWileymisc")
library(checkpoint)
checkpoint("2023-01-01")  # replace with desired date
mu=c(0,0)
sigma=matrix(c(1, .5, .5,1),2)
set.seed
set.seed(1234)
d=as.date.table(rmvnorm(500,mean = mu,sigma = sigma ))
d=as.date.table(rmvnorm(500,mean = mu,sigma = sigma ))
library(checkpoint)
checkpoint("2018-09-28")
library(ggplot2)
library(cowplot)
library()
library(MASS)
library(mvtnorm)
library(mgcv)
library(quantreg)
library(JWileymisc)
library(date.table)
options(width=70,digits=2)
d=as.date.table(rmvnorm(500,mean = mu,sigma = sigma ))
View(sigma)
set.seed(1234)
d=as.date.table(rmvnorm(500,mean = mu,sigma = sigma ))
packages=c("tidyverse","data.table","devtools","shiny","shinydashboard",
"sommer","agridat","agricolae","desplot")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
library(pacman)
p_load(assertthat,tidyverse,ggraph,igraph,ggmap)
install.packages("pacman")
library(pacman)
library(pacman)
p_load(assertthat,tidyverse,ggraph,igraph,ggmap)
install.packages("DT")
library(DT)
datatable(iris)
install.packages("networkD3")
library(networkD3)
src = c("A","A","A","A","B","B","B","C","C","D")
target=c("B","C","D","J","E","F","G","H","I")
networkData = data.frame(src,target)
networkData -> data.frame(src,target)
library("DT")
library(networkD3)
src = c("A","A","A","A","B","B","B","C","C","D")target=c("B","C","D","J","E","F","G","H","I")
src = c("A","A","A","A","B","B","B","C","C","D")
target=c("B","C","D","J","E","F","G","H","I")
networkData -> data.frame(src,target)
simpleNetwork(networkData,zoom = T)
data(MisLinks)
force(MisLinks)
data(MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes,Source = "source",Target = "target", Value = "value", NodeID = "name",Group = "group", opacity = 0.8)
install.packages('nycflights13')
install.packages('dplyr')
airlines
load(nycflights13)
load('nycflights13')
library(nycflights13)
airlines
weather
qnorm(0.025,0,1)
install.packages("remotes")
remotes::install_github("GuangchuangYu/nCov2019")
get_nCov2019()
source("example.R")
require(nCov2019)
y <- load_nCov2019(lang = 'en', source='github')
d = y['global']
require(dplyr)
require(shadowtext)
dd <- filter(d, time == time(y) & country != "China") %>%
arrange(desc(cum_confirm))
dd = dd[1:40, ]
dd$country = factor(dd$country, levels=dd$country)
cols <- rev(RColorBrewer::brewer.pal(10, "RdYlGn"))
dd$angle = 1:40 * 360/40
label_cut = 700
i = dd$angle >= 180 & dd$cum_confirm > label_cut
dd$angle[i] = dd$angle[i] + 180
j = dd$angle < 180 & dd$cum_confirm < 1000
dd$angle[j] = dd$angle[j] - 90
dd$vjust = 1
dd$vjust[i] = 0
dd$vjust[j] = 0.5
dd$y = dd$cum_confirm *.8
dd$y[j] = dd$y[j] * .7
require(ggplot2)
p <- ggplot(dd, aes(country, cum_confirm, fill=cum_confirm)) +
geom_col(width=1, color='grey90') +
geom_col(aes(y=I(5)), width=1, fill='grey90', alpha = .2) +
geom_col(aes(y=I(3)), width=1, fill='grey90', alpha = .2) +
geom_col(aes(y=I(2)), width=1, fill = "white") +
scale_y_log10() +
scale_fill_gradientn(colors=cols, trans="log") +
geom_shadowtext(aes(label=paste(country, cum_confirm, sep="\n"),
y = y, angle=angle,
vjust=vjust),
data=function(d) d[d$cum_confirm > label_cut,],
size=3, colour = "white", bg.colour="black",
fontface="bold")  +
geom_text(aes(label=paste0(cum_confirm, ", ", country),
y = max(cum_confirm) * 2,
angle=angle+90),
data=function(d) d[d$cum_confirm < label_cut,],
size=3, vjust=1) +
coord_polar(direction=-1) +
theme_void() +
theme(legend.position="none")
p1 = ggplotify::as.ggplot(p, scale=1.2)
require(dplyr)
require(ggplot2)
require(shadowtext)
require(nCov2019)
d <- load_nCov2019()
dd <- d['global'] %>%
as_tibble %>%
rename(confirm=cum_confirm) %>%
filter(confirm > 100 & country != "China") %>%
group_by(country) %>%
mutate(days_since_100 = as.numeric(time - min(time))) %>%
ungroup
breaks=c(100, 200, 500, 1000, 2000, 5000, 10000, 20000, 50000, 100000)
p2 <- ggplot(dd, aes(days_since_100, confirm, color = country)) +
geom_smooth(method='lm', aes(group=1),
data = . %>% filter(!country %in% c("Japan", "Singapore")),
color='grey10', linetype='dashed') +
geom_line(size = 0.8) +
geom_point(pch = 21, size = 1) +
scale_y_log10(expand = expansion(add = c(0,0.1)),
breaks = breaks, labels = breaks) +
scale_x_continuous(expand = expansion(add = c(0,1))) +
theme_minimal(base_size = 14) +
theme(
panel.grid.minor = element_blank(),
legend.position = "none",
plot.margin = margin(3,20,3,3,"mm")
) +
coord_cartesian(clip = "off") +
geom_shadowtext(aes(label = paste0(" ",country)), hjust=0, vjust = 0,
data = . %>% group_by(country) %>% top_n(1, days_since_100),
bg.color = "white") +
labs(x = "Number of days since 100th case", y = NULL,
title = "Confirmed COVID-19 cases",
subtitle = time(d))
library(chinamap)
x <- get_nCov2019(lang = 'en')
cn = get_map_china()
cn$province <- trans_province(cn$province)
p3 <- plot(x, region = 'china', chinamap = cn,
continuous_scale = FALSE,
palette = 'Blues', font.size = 2) +
theme_minimal(base_size=14)
require(cowplot)
pp <- plot_grid(p2, p3, ncol=1, labels=c("B", "C"),
rel_heights=c(.7, 1))
g <- plot_grid(p1, pp, ncol=2, rel_widths=c(1.2, 1), labels=c("A", ""))
ggsave(g, filename = "nCov2019.jpg", width=16, height=11)
View(d)
View(ipak)
install.packages('installr')
require(installr)
updateR()
updateR()
R
dome()
demo()
installed.packages()
old.packages()
update.packages()
library(lavaan)
detach("package:lavaan", unload = TRUE)
library(lavaan)
detach("package:lavaan", unload = TRUE)
update.packages()
detach("package:dplyr",unload = TURE)
help(mutate,package=dplyr)
update.packages()
detach("package:dplyr",unload = TURE)
help(mutate,package=dplyr)
update.packages()
detach("package:dplyr",unload = TURE)
help(mutate,package="dplyr")
update.packages()
detach("package:dplyr",unload = TURE)
help(mutate,package = "dplyr")
View(ipak)
library("gdata")
example1<-read.xls("5example.xlsx")
library(readxl)
X5example <- read_excel("C:/Users/asus/Desktop/R/医咖会R语�\200/5example.xlsx")
View(X5example)
options(
htmltools.dir.version = FALSE, formatR.indent = 2,
width = 55, digits = 4, warnPartialMatchAttr = FALSE, warnPartialMatchDollar = FALSE
)
local({
r = getOption('repos')
if (!length(r) || identical(unname(r['CRAN']), '@CRAN@'))
r['CRAN'] = 'https://cran.rstudio.com'
options(repos = r)
})
lapply(c('DT', 'formatR', 'svglite', 'rticles'), function(pkg) {
if (system.file(package = pkg) == '') install.packages(pkg)
})
# install from github
githubs <- c('citr' = 'crsh/citr')
lapply(names(githubs), function(pkg) {
if (system.file(package = pkg) == '') remotes::install_github(githubs[pkg], upgrade = FALSE)
})
unlink("C:/Users/asus/Desktop/R/bookdown-book-zh_CN-main/bookdown-book-zh_CN-main/02-components_cache", recursive = TRUE)
```{r pressure-plot, fig.asp=.7, fig.width=6, fig.cap='指定纵横比、宽度和对齐方式的一个图片示例。', fig.align='center', out.width='90%'}
par(mar = c(4, 4, .1, .1))
plot(pressure, pch = 19, type = 'b')
```
&emsp;&emsp;图片的实际大小是由区块选项 `fig.width` 和 `fig.height` 决定的（图片的大小由图形设备 (graphical device) 生成），并且我们能够通过区块选项 `out.width` 和 `out.height` 指定图片的输出大小。这两个选项可能的取值由文档的输出格式决定。例如，`out.width = '30%'` 对于 HTML 输出格式来说是有效的，但对于 LaTeX/PDF 输出来说是无效值。然而，**knitr** 会自动地将 `x%` 格式的 `out.width` 的百分比值转化为 `(x / 100) \linewidth`。例如，当输出格式为 LaTeX 时，`out.width = '70%'` 将会被视为 `.7\linewidth`。这样的处理使得我们能够以一致的方式指定图片的相对宽度。图 \@ref(fig:cars-plot) 是 `out.width = 70%` 的一个示例。
```{r table-multi, tidy=FALSE}
knitr::kable(
list(
head(iris[, 1:2], 3),
head(mtcars[, 1:3], 5)
),
caption = '两个表格的故事。', booktabs = TRUE
)
```
install.packages("bookdown", dependencies = TRUE)
install.packages("bookdown", dependencies = TRUE)
rmarkdown::pandoc_version()
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, highlight=TRUE)
setwd("C:/Users/asus/Desktop/R/health")
knitr::opts_chunk$set(echo = TRUE, eval=TRUE, highlight=TRUE)
library(ggplot2)
set.seed(123)
normal_data <- rnorm(1000, mean = 0, sd = 1)
right_skewed_data <- rexp(1000, rate = 0.2)
left_skewed_data <- -rexp(1000, rate = 0.2)
# Create data frame
data <- data.frame(
Value = c(normal_data, right_skewed_data, left_skewed_data),
Distribution = rep(c("Normal", "Right Skewed", "Left Skewed"), each = 1000)
)
# Create the plot
p <- ggplot(data, aes(x = Value, fill = Distribution)) +
geom_density(alpha = 0.5) +
labs(title = "Distributions Plot with Density Curves", x = "Value", y = "Density") +
theme_minimal() +
scale_fill_discrete(name = "Distribution")
# Add density curves
p +
stat_function(
fun = dnorm,
args = list(mean = mean(normal_data), sd = sd(normal_data)),
color = "blue",
linetype = "dashed"
) +
stat_function(
fun = function(x) dexp(x, rate = 1/mean(right_skewed_data)),
color = "green",
linetype = "dashed"
) +
stat_function(
fun = function(x) dexp(-x, rate = 1/mean(left_skewed_data)),
color = "purple",
linetype = "dashed"
)
setwd("C:/Users/asus/Desktop/R/zhoulvbang/zhoulvbang.github.io")
install.packages("bookdown")
install.packages("bookdown")
python_path <- system("which python3", intern = TRUE)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("ggplot")
unlink("index_cache", recursive = TRUE)
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
