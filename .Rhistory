labs(title = "正态分布密度函数",
x = "x",
y = "密度",
color = "分布参数") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",  # 将图例框设置为垂直排列
legend.margin = margin(t = 10, r = 0, b = 0, l = 0),  # 调整图例边距
legend.spacing.y = unit(0.5, "cm"),  # 调整图例项之间的垂直间距
legend.key.size = unit(1, "cm"),  # 调整图例键的大小
legend.text = element_text(margin = margin(r = 10)),  # 调整图例文本右边距
plot.margin = margin(t = 20, r = 10, b = 10, l = 20)  # 增加图表底部边距，为图例留出空间
) +
guides(color = guide_legend(nrow = 2))  # 将图例设置为两行
# 保存图形
ggsave("normal_distributions_two_row_legend.png", width = 10, height = 7, dpi = 300)
# 创建数据框
x <- seq(-20, 20, length.out = 1000)
df <- data.frame(x = rep(x, 4))
# 添加不同参数的正态分布密度
df$y1 <- dnorm(x, mean = -3, sd = 5)
df$y2 <- dnorm(x, mean = 0, sd = 1)
df$y3 <- dnorm(x, mean = 3, sd = 3)
df$y4 <- dnorm(x, mean = 5, sd = 2)
# 将数据转换为长格式
df_long <- tidyr::pivot_longer(df, cols = starts_with("y"), names_to = "distribution", values_to = "density")
# 创建标签
labels <- c(
y1 = "μ = -3, σ = 5",
y2 = "μ = 0, σ = 1",
y3 = "μ = 3, σ = 3",
y4 = "μ = 5, σ = 2"
)
# 绘制图形
ggplot(df_long, aes(x = x, y = density, color = distribution)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple"), labels = labels) +
labs(title = "正态分布密度函数",
x = "x",
y = "密度",
color = "分布参数") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",  # 将图例框设置为垂直排列
legend.margin = margin(t = 5, r = 0, b = 5, l = 0),  # 减小图例边距
legend.spacing.y = unit(0.1, "cm"),  # 减小图例项之间的垂直间距
legend.key.size = unit(0.8, "cm"),  # 减小图例键的大小
legend.text = element_text(margin = margin(r = 5), size = 8),  # 减小图例文本大小和右边距
legend.title = element_text(size = 9),  # 减小图例标题大小
plot.margin = margin(t = 20, r = 10, b = 15, l = 20)  # 调整图表边距
) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))  # 将图例设置为两行，并按行填充
# 保存图形
ggsave("normal_distributions_compact_legend.png", width = 10, height = 6.5, dpi = 300)
setwd("C:/Users/asus/Desktop/R/zhoulvbang/zhoulvbang.github.io")
# 创建数据框
x <- seq(-20, 20, length.out = 1000)
df <- data.frame(x = rep(x, 4))
# 添加不同参数的正态分布密度
df$y1 <- dnorm(x, mean = -3, sd = 5)
df$y2 <- dnorm(x, mean = 0, sd = 1)
df$y3 <- dnorm(x, mean = 3, sd = 3)
df$y4 <- dnorm(x, mean = 5, sd = 2)
# 将数据转换为长格式
df_long <- tidyr::pivot_longer(df, cols = starts_with("y"), names_to = "distribution", values_to = "density")
# 创建标签
labels <- c(
y1 = "μ = -3, σ = 5",
y2 = "μ = 0, σ = 1",
y3 = "μ = 3, σ = 3",
y4 = "μ = 5, σ = 2"
)
# 绘制图形
ggplot(df_long, aes(x = x, y = density, color = distribution)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple"), labels = labels) +
labs(title = "正态分布密度函数",
x = "x",
y = "密度",
color = "分布参数") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",  # 将图例框设置为垂直排列
legend.margin = margin(t = 5, r = 0, b = 5, l = 0),  # 减小图例边距
legend.spacing.y = unit(0.1, "cm"),  # 减小图例项之间的垂直间距
legend.key.size = unit(0.8, "cm"),  # 减小图例键的大小
legend.text = element_text(margin = margin(r = 5), size = 8),  # 减小图例文本大小和右边距
legend.title = element_text(size = 9),  # 减小图例标题大小
plot.margin = margin(t = 20, r = 10, b = 15, l = 20)  # 调整图表边距
) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))  # 将图例设置为两行，并按行填充
# 保存图形
ggsave("normal_distributions_compact_legend.png", width = 10, height = 6.5, dpi = 300)
# Parameters
mu <- 32.86
sigma <- 1.96
# Generate x-axis values
x <- seq(mu - 4*sigma, mu + 4*sigma, length.out = 100)
# Calculate corresponding normal distribution values
y <- dnorm(x, mean = mu, sd = sigma)
# Create the plot
ggplot(data.frame(x, y), aes(x, y)) +
geom_line(color = "blue", linewidth = 1) +
geom_vline(xintercept = c(mu, mu - sigma, mu + sigma), linetype = "dashed", color = "red") +
annotate("text", x = mu, y = 0.05, label = "μ", color = "red", hjust = -0.5) +
annotate("text", x = mu - sigma, y = 0.05, label = expression(paste("μ - ", sigma)), color = "red", hjust = 1.5) +
annotate("text", x = mu + sigma, y = 0.05, label = expression(paste("μ + ", sigma)), color = "red", hjust = -0.5) +
labs(title = paste("Normal Distribution: μ =", mu, ", σ =", sigma),
x = "Frequency", y = "Latent Trait") +
scale_x_continuous(breaks = c(mu, mu - sigma, mu + sigma)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# 加载必要的库
library(ggplot2)
library(tidyr)
# 创建数据框
x <- seq(-20, 20, length.out = 1000)
df <- data.frame(x = rep(x, 4))
# 添加不同参数的正态分布密度
df$y1 <- dnorm(x, mean = -3, sd = 5)
df$y2 <- dnorm(x, mean = 0, sd = 1)
df$y3 <- dnorm(x, mean = 3, sd = 3)
df$y4 <- dnorm(x, mean = 5, sd = 2)
# 将数据转换为长格式
df_long <- tidyr::pivot_longer(df, cols = starts_with("y"), names_to = "distribution", values_to = "density")
# 创建标签
labels <- c(
y1 = "μ = -3, σ = 5",
y2 = "μ = 0, σ = 1",
y3 = "μ = 3, σ = 3",
y4 = "μ = 5, σ = 2"
)
# 绘制图形
ggplot(df_long, aes(x = x, y = density, color = distribution)) +
geom_line() +
scale_color_manual(values = c("red", "blue", "green", "purple"), labels = labels) +
labs(title = "正态分布密度函数",
x = "x",
y = "密度",
color = "分布参数") +
theme_minimal() +
theme(
legend.position = "bottom",
legend.box = "vertical",  # 将图例框设置为垂直排列
legend.margin = margin(t = 5, r = 0, b = 5, l = 0),  # 减小图例边距
legend.spacing.y = unit(0.1, "cm"),  # 减小图例项之间的垂直间距
legend.key.size = unit(0.8, "cm"),  # 减小图例键的大小
legend.text = element_text(margin = margin(r = 5), size = 8),  # 减小图例文本大小和右边距
legend.title = element_text(size = 9),  # 减小图例标题大小
plot.margin = margin(t = 20, r = 10, b = 15, l = 20)  # 调整图表边距
) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))  # 将图例设置为两行，并按行填充
# 加载必要的库
library(ggplot2)
library(tidyr)
# 创建数据框
x <- seq(-20, 20, length.out = 1000)
df <- data.frame(x = rep(x, 4))
# 添加不同参数的正态分布密度
df$y1 <- dnorm(x, mean = -3, sd = 5)
df$y2 <- dnorm(x, mean = 0, sd = 1)
df$y3 <- dnorm(x, mean = 3, sd = 3)
df$y4 <- dnorm(x, mean = 5, sd = 2)
# 将数据转换为长格式
df_long <- tidyr::pivot_longer(df, cols = starts_with("y"), names_to = "distribution", values_to = "density")
# 创建标签
labels <- c(
y1 = "μ = -3, σ = 5",
y2 = "μ = 0, σ = 1",
y3 = "μ = 3, σ = 3",
y4 = "μ = 5, σ = 2"
)
# 绘制图形
ggplot(df_long, aes(x = x, y = density, color = distribution)) +
geom_line(size = 1) +  # 增加线条粗细
scale_color_manual(values = c("red", "blue", "green", "purple"), labels = labels) +
labs(title = "正态分布密度函数",
x = "x",
y = "密度",
color = "分布参数") +
theme_minimal(base_size = 14) +  # 增加基础字体大小
theme(
plot.title = element_text(size = 20, face = "bold"),  # 增大标题字体
axis.title = element_text(size = 16),  # 增大轴标题字体
axis.text = element_text(size = 12),  # 增大轴刻度标签字体
legend.position = "bottom",
legend.box = "vertical",
legend.margin = margin(t = 10, r = 0, b = 10, l = 0),
legend.spacing.y = unit(0.2, "cm"),
legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 12),  # 增大图例文本字体
legend.title = element_text(size = 14, face = "bold"),  # 增大图例标题字体
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
bookdown::render_book("index.Rmd")
# 加载必要的库
#library(ggplot2)
#library(tidyr)
# 创建数据框
x <- seq(-20, 20, length.out = 1000)
df <- data.frame(x = rep(x, 4))
# 添加不同参数的正态分布密度
df$y1 <- dnorm(x, mean = -3, sd = 5)
df$y2 <- dnorm(x, mean = 0, sd = 1)
df$y3 <- dnorm(x, mean = 3, sd = 3)
df$y4 <- dnorm(x, mean = 5, sd = 2)
# 将数据转换为长格式
df_long <- tidyr::pivot_longer(df, cols = starts_with("y"), names_to = "distribution", values_to = "density")
# 创建标签
labels <- c(
y1 = "μ = -3, σ = 5",
y2 = "μ = 0, σ = 1",
y3 = "μ = 3, σ = 3",
y4 = "μ = 5, σ = 2"
)
# 绘制图形
ggplot(df_long, aes(x = x, y = density, color = distribution)) +
geom_line(size = 1) +  # 增加线条粗细
scale_color_manual(values = c("red", "blue", "green", "purple"), labels = labels) +
labs(title = "正态分布密度函数",
x = "x",
y = "密度",
color = "分布参数") +
theme_minimal(base_size = 14) +  # 增加基础字体大小
theme(
plot.title = element_text(size = 20, face = "bold"),  # 增大标题字体
axis.title = element_text(size = 16),  # 增大轴标题字体
axis.text = element_text(size = 12),  # 增大轴刻度标签字体
legend.position = "bottom",
legend.box = "vertical",
legend.margin = margin(t = 10, r = 0, b = 10, l = 0),
legend.spacing.y = unit(0.2, "cm"),
legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 12),  # 增大图例文本字体
legend.title = element_text(size = 14, face = "bold"),  # 增大图例标题字体
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
bookdown::render_book("index.Rmd")
bookdown::render_book("index.Rmd")
# 加载必要的库
library(ggplot2)
library(tidyr)
# 创建数据框
x <- seq(-20, 20, length.out = 1000)
df <- data.frame(x = rep(x, 4))
# 添加不同参数的正态分布密度
df$y1 <- dnorm(x, mean = -3, sd = 5)
df$y2 <- dnorm(x, mean = 0, sd = 1)
df$y3 <- dnorm(x, mean = 3, sd = 3)
df$y4 <- dnorm(x, mean = 5, sd = 2)
# 将数据转换为长格式
df_long <- tidyr::pivot_longer(df, cols = starts_with("y"), names_to = "distribution", values_to = "density")
# 创建标签
labels <- c(
y1 = "μ = -3, σ = 5",
y2 = "μ = 0, σ = 1",
y3 = "μ = 3, σ = 3",
y4 = "μ = 5, σ = 2"
)
# 绘制图形
ggplot(df_long, aes(x = x, y = density, color = distribution)) +
geom_line(size = 1) +  # 增加线条粗细
scale_color_manual(values = c("red", "blue", "green", "purple"), labels = labels) +
labs(title = "正态分布密度函数",
x = "x",
y = "密度",
color = "分布参数") +
theme_minimal(base_size = 14) +  # 增加基础字体大小
theme(
plot.title = element_text(size = 20, face = "bold"),  # 增大标题字体
axis.title = element_text(size = 16),  # 增大轴标题字体
axis.text = element_text(size = 12),  # 增大轴刻度标签字体
legend.position = "bottom",
legend.box = "vertical",
legend.margin = margin(t = 10, r = 0, b = 10, l = 0),
legend.spacing.y = unit(0.2, "cm"),
legend.key.size = unit(1, "cm"),
legend.text = element_text(size = 12),  # 增大图例文本字体
legend.title = element_text(size = 14, face = "bold"),  # 增大图例标题字体
plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
) +
guides(color = guide_legend(nrow = 2, byrow = TRUE))
bookdown::render_book("index.Rmd")
library(ggplot2)
# Generate x-axis values
x <- seq(-4, 4, length.out = 1000)
# Calculate probability density values
density_values <- dnorm(x, mean = 0, sd = 1)
# Create the normal distribution plot
normal_plot <- ggplot(data.frame(x, density_values), aes(x = x, y = density_values)) +
geom_line(color = "black", size = 1) +
geom_area(data = data.frame(x = x[x >= -1 & x <= 1],
y = density_values[x >= -1 & x <= 1]),
aes(x = x, y = y), fill = "gray", alpha = 0.5) +
geom_area(data = data.frame(x = x[x >= -2 & x <= 2],
y = density_values[x >= -2 & x <= 2]),
aes(x = x, y = y), fill = "lightblue", alpha = 0.5) +
geom_area(data = data.frame(x = x[x >= -3 & x <= 3],
y = density_values[x >= -3 & x <= 3]),
aes(x = x, y = y), fill = "blue", alpha = 0.5) +
geom_vline(xintercept = c(-1, 1, -2, 2, -3, 3), linetype = "dashed",
color = "black") +
labs(title = "Normal Distribution with 68-95-99.7 Rule",
x = "Standard Deviations from Mean",
y = "Probability Density") +
theme_minimal()
# Display the normal distribution plot
print(normal_plot)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))+
ylim(0, 2.5)  # 设置y轴范围
# 显示图表
print(p)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "v:Degrees of Freedom") +
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 加载 ggplot2 包
#library(ggplot2)
#library(showtext)
# 使用 showtext 以支持中文字体
showtext_auto()
font_add("SimHei", "simhei.ttf")
# 定义自由度
df_values <- c(1, 2, 10, Inf)
# 创建一个数据框，用于绘图
x <- seq(-5, 5, length.out = 100)
df_data <- data.frame(x = rep(x, times = length(df_values)),
df = factor(rep(df_values, each = length(x))))
# 计算不同自由度下的 t 分布密度
df_data$density <- with(df_data, dt(x, df = as.numeric(df)))
# 绘制图形
ggplot(df_data, aes(x = x, y = density, color = df)) +
geom_line(linewidth = 1) +
labs(title = "t 分布曲线簇",
x = "x",
y = "密度",
color = "自由度") +
theme_minimal() +
scale_color_manual(values = c("red", "blue", "green", "black"),
labels = c("df=1", "df=2", "df=10", "正态分布")) +
theme(text = element_text(family = "SimHei"),
legend.title = element_text(family = "SimHei"))
x <- seq(-5, 5, length=100)
y_left_skewed <- 1.5 * dnorm(x - 2)  # Adjusted left-skewed distribution
y_right_skewed <- 1.5 * dnorm(x + 2)  # Adjusted right-skewed distribution
par(mfrow=c(1, 2))  # Set the layout to one row and two columns
# Plot for Left Skewed Distribution
plot(x, y_left_skewed, type="l", ylim=range(y_left_skewed, y_right_skewed)*1.1, xlim=range(x), col="red", xlab="", ylab="")
box()
axis(1, at=-5:5)
axis(2)
title(main="Left Skewed Distribution")
mtext(expression(paste("f(",x,"; ", mu," = 2, ", sigma^2," = 1)")), side = 3, line = 0.5)
# Plot for Right Skewed Distribution
plot(x, y_right_skewed, type="l", ylim=range(y_left_skewed, y_right_skewed)*1.1, xlim=range(x), col="blue", xlab="", ylab="")
box()
axis(1, at=-5:5)
axis(2)
title(main="Right Skewed Distribution")
mtext(expression(paste("f(",x,"; ", mu," = -2, ", sigma^2," = 1)")), side = 3, line = 0.5)
# Generate x-axis values
x <- seq(-4, 4, length.out = 1000)
# Calculate probability density values
density_values <- dnorm(x, mean = 0, sd = 1)
# Create a data frame for shading areas
shaded_areas <- data.frame(x = c(-1, 1, -2, 2, -3, 3),
y = c(0.1, 0.1, 0.05, 0.05, 0.02, 0.02),
label = c("68%", "68%", "95%", "95%", "99.7%", "99.7%"))
# Create the normal distribution plot
normal_plot <- ggplot(data.frame(x, density_values), aes(x = x, y = density_values)) +
geom_line(color = "black", size = 1) +
geom_area(data = subset(shaded_areas, label == "68%"), aes(x = x, y = y),
fill = "gray", color = NA) +
geom_area(data = subset(shaded_areas, label == "95%"), aes(x = x, y = y),
fill = "lightblue", color = NA) +
geom_area(data = subset(shaded_areas, label == "99.7%"), aes(x = x, y = y),
fill = "blue", color = NA) +
annotate("text", x = 0, y = 0.07, label = "68%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.03, label = "95%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.015, label = "99.7%", size = 4, color = "black") +
geom_vline(xintercept = c(-1, 1, -2, 2, -3, 3), linetype = "dashed",
color = c("black", "black", "black", "black", "black", "black")) +
labs(title = "Normal Distribution with 68-95-99.7 Rule",
x = "Standard Deviations from Mean",
y = "Probability Density") +
theme_minimal()
# Display the normal distribution plot
print(normal_plot)
# Generate x-axis values
x <- seq(-4, 4, length.out = 1000)
# Calculate probability density values
density_values <- dnorm(x, mean = 0, sd = 1)
# Create a data frame for shading areas
shaded_areas <- data.frame(x = c(-1, 1, -2, 2, -3, 3),
y = c(0.1, 0.1, 0.05, 0.05, 0.02, 0.02),
label = c("68%", "68%", "95%", "95%", "99.7%", "99.7%"))
# Create the normal distribution plot
normal_plot <- ggplot(data.frame(x, density_values), aes(x = x, y = density_values)) +
geom_line(color = "black", size = 1) +
geom_area(data = subset(shaded_areas, label == "68%"), aes(x = x, y = y),
fill = "gray", color = NA) +
geom_area(data = subset(shaded_areas, label == "95%"), aes(x = x, y = y),
fill = "lightblue", color = NA) +
geom_area(data = subset(shaded_areas, label == "99.7%"), aes(x = x, y = y),
fill = "blue", color = NA) +
annotate("text", x = 0, y = 0.07, label = "68%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.03, label = "95%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.015, label = "99.7%", size = 4, color = "black") +
geom_vline(xintercept = c(-1, 1, -2, 2, -3, 3), linetype = "dashed",
color = c("black", "black", "black", "black", "black", "black")) +
labs(title = "Normal Distribution with 68-95-99.7 Rule",
x = "Standard Deviations from Mean",
y = "Probability Density") +
theme_minimal()
# Display the normal distribution plot
print(normal_plot)
# Generate x-axis values
x <- seq(-4, 4, length.out = 1000)
# Calculate probability density values
density_values <- dnorm(x, mean = 0, sd = 1)
# Create a data frame for shading areas
shaded_areas <- data.frame(x = c(-1, 1, -2, 2, -3, 3),
y = c(0.1, 0.1, 0.05, 0.05, 0.02, 0.02),
label = c("68%", "68%", "95%", "95%", "99.7%", "99.7%"))
# Create the normal distribution plot
normal_plot <- ggplot(data.frame(x, density_values), aes(x = x, y = density_values)) +
geom_line(color = "black", size = 1) +
geom_area(data = subset(shaded_areas, label == "68%"), aes(x = x, y = y),
fill = "gray", color = NA) +
geom_area(data = subset(shaded_areas, label == "95%"), aes(x = x, y = y),
fill = "lightblue", color = NA) +
geom_area(data = subset(shaded_areas, label == "99.7%"), aes(x = x, y = y),
fill = "blue", color = NA) +
annotate("text", x = 0, y = 0.07, label = "68%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.03, label = "95%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.015, label = "99.7%", size = 4, color = "black") +
geom_vline(xintercept = c(-1, 1, -2, 2, -3, 3), linetype = "dashed",
color = c("black", "black", "black", "black", "black", "black")) +
labs(title = "Normal Distribution with 68-95-99.7 Rule",
x = "Standard Deviations from Mean",
y = "Probability Density") +
theme_minimal()
# Display the normal distribution plot
print(normal_plot)
# 生成x轴值
x <- seq(-4, 4, length.out = 1000)
# 计算概率密度值
density_values <- dnorm(x, mean = 0, sd = 1)
# 创建阴影区域的数据框
shaded_areas <- data.frame(x = c(-1, 1, -2, 2, -3, 3),
y = c(0.1, 0.1, 0.05, 0.05, 0.02, 0.02),
label = c("68%", "68%", "95%", "95%", "99.7%", "99.7%"))
# 创建正态分布图
normal_plot <- ggplot(data.frame(x, density_values), aes(x = x, y = density_values)) +
geom_line(color = "black", size = 1) +
geom_area(data = subset(shaded_areas, label == "68%"), aes(x = x, y = y),
fill = "gray", color = NA) +
geom_area(data = subset(shaded_areas, label == "95%"), aes(x = x, y = y),
fill = "lightblue", color = NA) +
geom_area(data = subset(shaded_areas, label == "99.7%"), aes(x = x, y = y),
fill = "blue", color = NA) +
annotate("text", x = 0, y = 0.07, label = "68%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.03, label = "95%", size = 4, color = "black") +
annotate("text", x = 0, y = 0.015, label = "99.7%", size = 4, color = "black") +
geom_vline(xintercept = c(-1, 1, -2, 2, -3, 3), linetype = "dashed",
color = "black") +
labs(title = "Normal Distribution with 68-95-99.7 Rule",
x = "Standard Deviations from Mean",
y = "Probability Density") +
theme_minimal()
# 显示正态分布图
print(normal_plot)
detach("package:cowplot", unload = TRUE)
library(cowplot)
library(cowplot)
bookdown::render_book("index.Rmd")
