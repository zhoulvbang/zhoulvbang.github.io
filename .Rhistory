df <- 3  # 你可以根据需要更改自由度
# 生成横坐标点
x_values <- seq(0, 20, length.out = 1000)
# 计算卡方分布的概率密度
density_values <- dchisq(x_values, df)
# 创建数据框
df_data <- data.frame(x = x_values, density = density_values)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density)) +
geom_line() +
labs(title = "Chi-square Distribution Curve", x = "x", y = "Density")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 30, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 生成纵坐标点
y_values <- seq(0, 1, length.out = 100)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom")
# 显示图表
print(p)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "Degrees of Freedom") +
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 设置自由度
df_values <- c(1, 2, 5, 10, 20, 100)
# 生成横坐标点
x_values <- seq(0, 15, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df = df_values)
# 计算卡方分布的概率密度
df_data$density <- dchisq(df_data$x, df_data$df)
# 绘制卡方分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df))) +
geom_line() +
labs(title = "Chi-square Distribution Curves", x = "x", y = "Density", color = "Degrees of Freedom") +
scale_color_discrete(name = "v:Degrees of Freedom") +
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置分子自由度
df1 <- 1
# 设置分母自由度范围
df2_values <- c(1, 5, 10, 20, 50)
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df2 = df2_values)
# 计算F分布的概率密度
df_data$density <- df(df_data$x, df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df2))) +
geom_line() +
labs(title = "F-distribution Curves with df1=1", x = "x", y = "Density", color = "df2") +
scale_color_discrete(name = "df2")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df2))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df2") +
scale_color_discrete(name = "df2")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1")
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "purple", "black"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))+
ylim(0, 1)  # 设置纵轴范围在（0,1）
# 显示图表
print(p)
# 安装必要的包（如果未安装）
# install.packages("ggplot2")
# 导入ggplot2包
library(ggplot2)
# 设置自由度组合
df_values <- list(c(1, 1), c(2, 1), c(5, 2), c(10, 1), c(100, 100))
# 生成横坐标点
x_values <- seq(0, 5, length.out = 1000)
# 创建数据框
df_data <- expand.grid(x = x_values, df1 = numeric(), df2 = numeric())
# 填充数据框
for (df in df_values) {
df_data <- rbind(df_data, data.frame(x = x_values, df1 = df[1], df2 = df[2]))
}
# 计算F分布的概率密度
df_data$density <- mapply(function(x, df1, df2) df(x, df1, df2), df_data$x, df_data$df1, df_data$df2)
# 绘制F分布曲线
p <- ggplot(data = df_data, aes(x = x, y = density, color = factor(df1))) +
geom_line() +
labs(title = "F-distribution Curves", x = "x", y = "Density", color = "df1") +
scale_color_discrete(name = "df1") +
annotate("text", x = c(1, 2, 3, 4, 4.5), y = c(0.8, 1.2, 0.6, 1.2, 0.2),
label = c("d1=1, d2=1", "d1=2, d2=1", "d1=5, d2=2", "d1=10, d2=1", "d1=100, d2=100"),
color = c("red", "yellow", "green", "blue", "purple"))+
ylim(0, 2.5)  # 设置y轴范围
# 显示图表
print(p)
install.packages("blogdown")
install.packages("cowsay")
say("I am a malou".by="monkey")
library(cowsya)
say("I am a malou".by="monkey")
library(cowsay)
say("I am a malou".by="monkey")
library(cowsay)
say("I am a malou",by="monkey")
install.packages("ggplot2")
install.packages("C:/Users/asus/AppData/Local/R/win-library/4.3/ggplot2_3.5.1.zip", repos = NULL, type = "source")
install.packages("C:/Users/asus/AppData/Local/R/win-library/4.3/ggplot2_3.5.1.zip", repos = NULL, type = "win.binary")
install.packages("tufte")
setwd("C:/Users/asus/Desktop/R/zhoulvbang/zhoulvbang.github.io")
install.packages("broom")
library(broom)
# 加载必要的库
library(ggplot2)
library(broom)
# 生成一些示例数据
set.seed(123)
x <- 1:100
y <- 2 + 3*x + rnorm(100, sd = 10)
# 拟合线性模型
model <- lm(y ~ x)
# 使用broom包获取模型的增强摘要
tidy_model <- tidy(model)
augmented_data <- augment(model)
# 绘制带有置信带的图
ggplot(augmented_data, aes(x = x, y = .fitted)) +
geom_point(alpha = 0.5) + # 绘制原始数据点
geom_smooth(method = "lm", se = TRUE, color = "blue") + # 绘制回归线及其置信带
geom_abline(intercept = tidy_model$estimate[1], slope = tidy_model$estimate[2], linetype = "dashed", color = "red") + # 绘制总体回归线（与geom_smooth的回归线相同，但为演示）
labs(title = "总体回归直线的置信带",
x = "X变量",
y = "Y变量")
# 注意：geom_smooth()已经绘制了回归线和置信带，但这里为了演示，我也添加了geom_abline()来显示总体回归线（实际上两者是相同的）
# 加载必要的库
library(ggplot2)
# 生成一些示例数据
set.seed(123)
x <- 1:100
y <- 2 + 3*x + rnorm(100, sd = 10)
# 拟合线性模型
model <- lm(y ~ x)
# 使用ggplot2绘制图表
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(alpha = 0.5) + # 绘制原始数据点
geom_smooth(method = "lm", # 绘制回归线和置信带
se = TRUE, # 启用标准误的计算
level = 0.95, # 设置置信水平为95%
color = "red", # 回归线颜色
fill = "grey", # 置信带填充颜色
linetype = "solid", # 置信带线型（但这里会被fill覆盖）
size = 1) + # 线条粗细
geom_smooth(method = "lm", # 再次绘制以获取预测带
se = TRUE,
level = 0.95,
color = NA, # 不绘制回归线
fill = NA, # 不填充置信带
linetype = "dashed", # 预测带线型为虚线
se.linetype = "dashed", # 确保预测带的标准误也是虚线
fullrange = TRUE, # 预测带扩展到整个x轴范围
size = 1) +
labs(title = "回归直线、95%置信带与95%预测带",
x = "X变量",
y = "Y变量") +
theme_minimal() # 使用简洁的主题
# 注意：由于geom_smooth()的默认行为，我们需要两次调用它，
# 第一次是为了绘制回归线和置信带，第二次是为了仅绘制预测带（通过隐藏回归线和置信带填充）。
# fullrange = TRUE 参数确保预测带扩展到整个x轴范围，但这可能不适用于所有情况。
# 加载必要的库
library(ggplot2)
# 生成一些示例数据
set.seed(123)
x <- 1:100
y <- 2 + 3*x + rnorm(100, sd = 10)
# 拟合线性模型
model <- lm(y ~ x)
# 使用ggplot2绘制图表
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(alpha = 0.5) + # 绘制原始数据点
geom_smooth(method = "lm", # 绘制回归线和置信带
se = TRUE, # 启用标准误的计算
level = 0.95, # 设置置信水平为95%
color = "red", # 回归线颜色
fill = "grey", # 置信带填充颜色
linetype = "solid", # 置信带线型（但这里会被fill覆盖）
size = 1) + # 线条粗细
geom_smooth(method = "lm", # 再次绘制以获取预测带
se = TRUE,
level = 0.95,
color = NA, # 不绘制回归线
fill = NA, # 不填充置信带
linetype = "dashed", # 预测带线型为虚线
se.linetype = "dashed", # 确保预测带的标准误也是虚线
fullrange = TRUE, # 预测带扩展到整个x轴范围
size = 1) +
labs(title = "回归直线、95%置信带与95%预测带",
x = "X变量",
y = "Y变量") +
theme_minimal() # 使用简洁的主题
# 注意：由于geom_smooth()的默认行为，我们需要两次调用它，
# 第一次是为了绘制回归线和置信带，第二次是为了仅绘制预测带（通过隐藏回归线和置信带填充）。
# fullrange = TRUE 参数确保预测带扩展到整个x轴范围，但这可能不适用于所有情况。
library(ggplot2)
# 生成一些示例数据
set.seed(123)
x <- 1:50
y <- 2 + 3*x + rnorm(50, sd = 10)
# 拟合线性模型
model <- lm(y ~ x)
# 使用ggplot2绘制图表
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(alpha = 0.5) + # 绘制原始数据点
geom_smooth(method = "lm", # 绘制回归线和置信带
se = TRUE, # 启用标准误的计算
level = 0.95, # 设置置信水平为95%
color = "red", # 回归线颜色
fill = "grey", # 置信带填充颜色
linetype = "solid", # 置信带线型（但这里会被fill覆盖）
size = 1) + # 线条粗细
geom_smooth(method = "lm", # 再次绘制以获取预测带
se = TRUE,
level = 0.95,
color = NA, # 不绘制回归线
fill = NA, # 不填充置信带
linetype = "dashed", # 预测带线型为虚线
se.linetype = "dashed", # 确保预测带的标准误也是虚线
fullrange = TRUE, # 预测带扩展到整个x轴范围
size = 1) +
labs(title = "回归直线、95%置信带与95%预测带",
x = "X变量",
y = "Y变量") +
theme_minimal() # 使用简洁的主题
set.seed(123)
x <- 1:50
y <- 2 + 1*x + rnorm(50, sd = 10)
# 拟合线性模型
model <- lm(y ~ x)
# 使用ggplot2绘制图表
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(alpha = 0.5) + # 绘制原始数据点
geom_smooth(method = "lm", # 绘制回归线和置信带
se = TRUE, # 启用标准误的计算
level = 0.95, # 设置置信水平为95%
color = "red", # 回归线颜色
fill = "grey", # 置信带填充颜色
linetype = "solid", # 置信带线型（但这里会被fill覆盖）
size = 1) + # 线条粗细
geom_smooth(method = "lm", # 再次绘制以获取预测带
se = TRUE,
level = 0.95,
color = NA, # 不绘制回归线
fill = NA, # 不填充置信带
linetype = "dashed", # 预测带线型为虚线
se.linetype = "dashed", # 确保预测带的标准误也是虚线
fullrange = TRUE, # 预测带扩展到整个x轴范围
size = 1) +
labs(title = "回归直线、95%置信带与95%预测带",
x = "X变量",
y = "Y变量") +
theme_minimal() # 使用简洁的主题
ggplot(data = data.frame(x, y), aes(x = x, y = y)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm",
se = TRUE,
level = 0.95,
color = "red",
fill = "grey",
linetype = "solid",
size = 1) +
labs(title = "回归直线与95%置信带",
x = "X变量",
y = "Y变量") +
theme_minimal()
